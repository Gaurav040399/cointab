postRoute.get('/users-posts', (req, res) => {
    // Query the database to get all users
    connection.query('SELECT * FROM users', (err, users) => {
      if (err) {
        console.error('Error fetching users:', err);
        res.status(500).json({ error: 'Error fetching users' });
        return;
      }
      
      // Iterate through each user
      Promise.all(users.map(user => {
        // Fetch posts for each user from the JSONPlaceholder API
        return new Promise((resolve, reject) => {
          const userId = user.id;
          const url = `https://jsonplaceholder.typicode.com/posts?userId=${userId}`;
          // Make HTTP request to fetch posts
          axios.get(url)
            .then(response => {
              // Add posts to the user object
              user.posts = response.data;
              resolve(user);
            })
            .catch(error => {
              console.error(`Error fetching posts for user ${userId}:`, error);
              reject(error);
            });
        });
      }))
      .then(usersWithPosts => {
        // Render the data on the page
        res.json(usersWithPosts);
      })
      .catch(error => {
        console.error('Error:', error);
        res.status(500).json({ error: 'Error fetching data' });
      });
    });
  });


postRoute.get('/download-users-posts-excel', (req, res) => {
    // Query the database to get all users
    let data 
     connection.query('SELECT * FROM users', (err, users) => {
      if (err) {
        console.error('Error fetching users:', err);
        res.status(500).json({ error: 'Error fetching users' });
        return;
      }
      
      // Iterate through each user
      Promise.all(users.map(user => {
        // Fetch posts for each user from the JSONPlaceholder API
        return new Promise((resolve, reject) => {
          const userId = user.id;
          const url = `https://jsonplaceholder.typicode.com/posts?userId=${userId}`;
          // Make HTTP request to fetch posts
          axios.get(url)
            .then(response => {
              // Add posts to the user object
              user.posts = response.data;
              resolve(user);
            })
            .catch(error => {
              console.error(`Error fetching posts for user ${userId}:`, error);
              reject(error);
            });
        });
      }))
      .then(usersWithPosts => {
        // Render the data on the page
        data = usersWithPosts
        res.json(usersWithPosts);
      })
      .catch(error => {
        console.error('Error:', error);
        res.status(500).json({ error: 'Error fetching data' });
      });
    });
      
      // Create a new Excel workbook and sheet
      const workbook = new ExcelJS.Workbook();
      const worksheet = workbook.addWorksheet('Users');
  
      // Add headers to the worksheet
      worksheet.addRow(['User ID', 'Name', 'Email', 'Phone', 'Website', 'City', 'Company']);
  
      // Add data for each user and their posts to the worksheet
      users.forEach(user => {
        worksheet.addRow([
          user.id,
          user.name,
          user.email,
          user.phone,
          user.website,
          user.city,
          user.company
        ]);
  
        // Add posts for the user
        user.posts.forEach(post => {
          worksheet.addRow([
            '',
            'Post ID: ' + post.id,
            'Title: ' + post.title,
            'Body: ' + post.body,
            '',
            '',
            ''
          ]);
        });
  
        // Add an empty row between users
        worksheet.addRow([]);
      });
  
      // Set content type and attachment header for the response
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader('Content-Disposition', 'attachment; filename=users_posts.xlsx');
  
      // Write the workbook to the response
      workbook.xlsx.write(res)
        .then(() => {
          // End the response
          res.end();
        })
        .catch(error => {
          console.error('Error writing Excel file:', error);
          res.status(500).json({ error: 'Error writing Excel file' });
        });
    });
  });